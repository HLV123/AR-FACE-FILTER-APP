import mediapipe as mp
import cv2
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
from camera import CameraHandler
from effects import EffectsManager
from gui import GUIManager

class ARFaceFilterApp:
    def __init__(self):
        # Kh·ªüi t·∫°o MediaPipe
        self.mp_face_mesh = mp.solutions.face_mesh
        
        # Kh·ªüi t·∫°o c√°c component
        self.camera = CameraHandler()
        self.effects = EffectsManager()
        self.gui = GUIManager(self)
        
        # Bi·∫øn ƒëi·ªÅu khi·ªÉn
        self.running = True
        self.current_frame = None
        
        # B·∫Øt ƒë·∫ßu camera thread
        self.camera_thread = threading.Thread(target=self.camera_loop)
        self.camera_thread.daemon = True
        self.camera_thread.start()
    
    def toggle_effect(self, effect_name):
        """B·∫≠t/t·∫Øt hi·ªáu ·ª©ng"""
        self.effects.toggle_effect(effect_name)
        print(f"{'‚úÖ' if self.effects.effects[effect_name] else '‚ùå'} {effect_name}: {'ON' if self.effects.effects[effect_name] else 'OFF'}")
    
    def reset_all_effects(self):
        """Reset t·∫•t c·∫£ hi·ªáu ·ª©ng"""
        self.effects.reset_all()
        self.gui.reset_checkboxes()
        print("üîÑ ƒê√£ reset t·∫•t c·∫£ hi·ªáu ·ª©ng")
    
    def capture_from_gui(self):
        """Ch·ª•p ·∫£nh t·ª´ n√∫t GUI"""
        if self.current_frame is not None:
            self.camera.capture_screenshot(self.current_frame)
            try:
                self.gui.fps_label.config(text=f"üì∏ ƒê√£ l∆∞u ·∫£nh!")
            except:
                pass
    
    def camera_loop(self):
        """V√≤ng l·∫∑p x·ª≠ l√Ω camera"""
        fps_counter = 0
        fps_start_time = time.time()
        
        while self.running:
            ret, image = self.camera.video.read()
            if not ret:
                break
            
            self.effects.frame_count += 1
            fps_counter += 1
            
            # T√≠nh FPS
            if fps_counter % 30 == 0:
                fps = 30 / (time.time() - fps_start_time)
                try:
                    self.gui.fps_label.config(text=f"üé• FPS: {fps:.1f} | Frame: {self.effects.frame_count}")
                    self.gui.particles_label.config(text=f"‚ú® Particles: {len(self.effects.particles)}")
                except:
                    pass
                fps_start_time = time.time()
            
            # X·ª≠ l√Ω ·∫£nh
            image = self.camera.process_frame(image)
            
            # √Åp d·ª•ng hi·ªáu ·ª©ng
            if any(self.effects.effects.values()):
                self.effects.update_particles(image)
                self.effects.draw_screen_border(image)
            
            # L∆∞u frame hi·ªán t·∫°i
            self.current_frame = image.copy()
            
            # Hi·ªÉn th·ªã tr√™n GUI
            try:
                image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                image_pil = Image.fromarray(image_rgb)
                image_tk = ImageTk.PhotoImage(image_pil)
                
                self.gui.camera_label.configure(image=image_tk)
                self.gui.camera_label.image = image_tk
            except:
                pass
            
            time.sleep(0.03)
    
    def close_app(self):
        """ƒê√≥ng ·ª©ng d·ª•ng"""
        print("üëã C·∫£m ∆°n b·∫°n ƒë√£ kh√°m ph√° V≈© Tr·ª• Ma Thu·∫≠t!")
        self.running = False
        self.camera.release()
        try:
            self.gui.root.quit()
            self.gui.root.destroy()
        except:
            pass
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        print("‚ú® Kh·ªüi ƒë·ªông V≈© Tr·ª• Ma Thu·∫≠t...")
        print("üí° Camera s·∫Ω hi·ªÉn th·ªã tr·ª±c ti·∫øp tr√™n giao di·ªán")
        
        self.gui.root.protocol("WM_DELETE_WINDOW", self.close_app)
        
        try:
            self.gui.root.mainloop()
        except KeyboardInterrupt:
            self.close_app()
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            self.close_app()